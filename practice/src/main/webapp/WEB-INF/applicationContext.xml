<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
">
	<context:component-scan base-package="org.com.dao"/>
	 <!-- 引入配置文件 -->  
	<bean id="propertyConfigurer"  
	    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	    <property name="location" value="classpath:jdbc.properties" />  
	</bean>  

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
	    destroy-method="close">  
	    <property name="driverClassName" value="${driverClassName}" />  
	    <property name="url" value="${url}" />  
	    <property name="username" value="${username}" />  
	    <property name="password" value="${password}" />  
	    <!-- 初始化连接大小 -->  
		<property name="initialSize" value="${initialSize}"></property>  
		<!-- 连接池最大数量 -->  
		<property name="maxActive" value="${maxActive}"></property>  
		<!-- 连接池最大空闲 -->  
		<property name="maxIdle" value="${maxIdle}"></property>  
		<!-- 连接池最小空闲 -->  
		<property name="minIdle" value="${minIdle}"></property>  
		<!-- 获取连接最大等待时间 -->  
	    <property name="maxWait" value="${maxWait}"></property>  
	</bean>  
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="dataSource" />  
	    <!-- 自动配置别名 -->  
    	<property name="typeAliasesPackage" value="org.com.model" /> 
	    <!-- 自动扫描mapping.xml文件 -->  
	    <property name="mapperLocations" value="classpath:mybatis/*.xml"></property>  
	</bean>  
	
	<!--动态代理实现 不用写dao的实现 -->  
        <bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
                <!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 -->  
                <property name="basePackage" value="com.cainiao.bn.basic.data.dao" />  
                <!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 -->  
                <!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->  
                <!--直接制定了sqlsessionTemplate名称，这个和上面的其实是一样的 -->  
              <!--   <property name="sqlSessionTemplateBeanName" value="sqlSession" />   -->
    </bean> 
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">   
          <constructor-arg ref="sqlSessionFactory" />   
    </bean>
    <!-- transaction support-->
	<!-- PlatformTransactionMnager -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
	<!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* org.com.service.*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
	<!-- enable transaction annotation support -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	<bean id="testSpring" class="org.com.model.TestSpring" init-method="syshello"></bean>
</beans>